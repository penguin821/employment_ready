<컨텍스트 스위칭>


==========================================================
<enum struct class 차이점>


==========================================================
<멀티쓰레드와 뮤텍스>
하나의 프로세스 안에서 여러 스레드를 실행하는것
임계영역 공유 자원의 독점을 허용하는 영역
뮤텍스 오직 하나의 스레드만이 공유 자원에 접근 가능하게 제어
세마포어 원하는 만큼의 스레드가 임계영역에 접근 가능

==========================================================
<동적할당과 스마트 포인터>

메모리를 필요에 따라 할당하고 해제하는 작업, 메모리 관리 유연, 자원 효율적, 데이터 생명주기 제어 가능
다만 해제 안하면 메모리 누수, 포인터 참조중인 메모리 해제시 뎅글링 포인터 발생

이런거 방지하기 위해서 스마트 포인터 사용
포인터처럼 사용하는 클래스 템플릿, 메모리 자동으로 해제해 누수 관리
new 사용해 메모리를 가리키게 한 포인터를 스마트 포인터에 대입해 관리
셰어드 포인터 - 어떤 객체를 참조하는 스마트 포인터의 개수를 참조하는 포인터
참조 카운트로 관리

유니크 포인터 하나의 스마트 포인터만 객체 가리키기 가능, 참조 카운트 1 못넘김
위크 포인터 참조 카운터가 늘어나진 않지만 순환 참조 제거용
==========================================================
<스택 힙 메모리 차이점>
힙
프로그래머가 직접 관리할 수 있는 메모리 영역, 동적할당도 여기에 해당
낮은 주소에서 높은 주소로 메모리 할당

스택
함수의 호출과 함께 할당, 지역 변수 매개변수 저장

==========================================================
<상속, 오버로딩, 오버라이딩, 가상함수, 순수 가상 함수, 가상 함수 테이블>

오버로딩 - 인자 타입이나 수는 다르지만 이름은 같은 함수 중복 정의
상속 - 상위 클래스의 속성, 메소드를 하위 클래스가 그대로 물려받는거
오버라이딩 - 부모 클래스에 정의된 함수를 상속 관계인 자식 클래스에서 재정의 하는것
가상함수 - 부모포인터, 자식주소값을 하면 부모께 나옴, 그걸 방지하기 위해 포인터의 자료형이 아닌 객체의 자료형을 따라가게 virtual 선언
순수 - 선언은 되어있는데 정의가 없어서 자식 클래스에서 반드시 재정의 해야하는 함수
가함테 - 가상 함수 선언한 클래스 내부에서 가상 함수들 관리하기 위한 테이블이 바이너리 rdata 영역에 기록됨, 이후 함수 호출할때마다 가상 함수 테이블을 참조
==========================================================
<프로세스와 쓰레드>
프로세스 - 실행 중인 프로그램, 독립된 메모리 공간을 가짐
스레드 - 프로세스 내에서 실행되는 실행 단위, 프로세스의 자원을 공유하면서 동작

프로세스는 독립된 공간을 가지기 때문에 프로세스 간의 자원 공유는 IPC 통해서 이루어짐
반면 스레드는 같은 프로세스 내에서 stack영역만 각자 가지고 있고 나머지 code heap data영역은 공유해서 더 데이터 공유가 더 유리

==========================================================
<RAII>
자원 획득은 초기화다, 즉 자원을 사용하고자 할때 자원 획득 클래스를 만들어 생성자를 통해 할당받고 소멸자를 통해 해제하는 디자인 기법. 객체의 생애는 런타임이 잘 관리해주니 객체의 생애와 자원의 생애를 묶어버리면 자원의 생애 또한 런타임이 잘 관리해줄 수 있음

==========================================================
<포물선 운동>
x = v0*cos0*t
y= v0*sin0*t - 1/2gt^2

<가속도 법칙>
f = ma
a = v-v0 / t- t0
<내적 외적>
abcos0
absin0

==========================================================
<빅오표기법>
