

==========================================================
<동적할당>

==========================================================
<스택 힙 메모리 차이점>

- 힙 영역
 프로그래머가 직접 관리할 수 있는 메모리 영역으로 이 공간에서 메모리를 할당하는 것을 동적할당이라 부른다.
힙 영역은 스택 영역과 달리 낮은 주소에서 높은 주소로 메모리가 할당 된다.

- 스택 영역
 함수의 호출과 함께 할당되며 지역 변수와 매개 변수가 저장되는 영역이다. 스택 영역에 저장되는 함수의 호출 정보를 스택프레임이라 한다.
스택 영역은 함수 호출이 완료되면 소멸하고 높은 주소에서 낮은 주소로 메모리가 할당된다.

==========================================================
<가상함수테이블 virtual>

==========================================================
<상속 오버로딩 오버라이딩>

==========================================================
<프로세스와 쓰레드>

프로세스: 컴퓨터에서 실행되고 있는 프로그램을 말하며, 프로세스는 운영체제로부터 자원을 할당 받는다.
특징
- 프로세스는 각각 독립된 메모리 영역(code, data, stack, heap)을 할당받는다.
- 기본적으로 프로세스당 최소 1개의 스레드를 가진다.
- 각 프로세스는 별도의 주소 공간에서 실행되며, 한 프로세스가 다른 프로세스의 변수나 자료구조에 접근할 수 없다.
- 한 프로세스가 다른 프로세스에 접근하려면 프로세스간 통신 (IPC)를 사용해야한다.


스레드: 스레드는 cpu사용의 기본 단위이며 프로세스 내에서 실행되는 여러 흐름 단위이다.
스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위이다.

특징
- 스레드는 프로세스 내에서 각각 stack만 따로 할당 받고 code, data, heap영역은 공유한다.
- 각각의 스레드는 별도의 레지스터와 stack을 가지고 있지만, heap 메모리는 서로 읽고 쓸 수 있다.
- 스레드는 프로세스의 메모리, 자원등을 공유하므로 커널의 도움 없이 상호간의 통신이 가능하다.

스레드를 사용하는 이유
- 운영체제에서 더 효율적으로 시스템 자원을 관리하기 위해 사용된다고 할 수 있다.
- 멀티 프로세스로 진행되는 작업을 멀티 스레드로 수행하게 되면 시스템 콜이 줄어들기 때문에 자원을 효울적으로 관리할 수 있다.

그래서 우리는 멀티 스레딩을 해야한다.
장점 하나의 프로세스 내에서 다수의 실행 단위들이 존재하여 작업의 수행에 필요한 자원들을 공유하기 때문에 
자원의 생성과 관리가 중복되는 것을 줄일 수 있다.

==========================================================
<스마트포인터>
포인터 처럼 사용하는 클래스 템플릿으로 메모리를 자동으로 해제해 메모리 누수를 방지

스마트 포인터는 new 키워드를 사용해 일반 포인터가 실제 메모리를 가리키도록 초기화한
후 기본 포인터를 스마트 포인터에 대입하여 사용한다. 
이렇게 정의된 스마트 포인터가 수명이 다하면 소멸자를 통해 delete 키워드를 
자동으로 사용해 메모리를 해제한다. 따라서 따로 메모리를 해제할 필요가 없게 된다.

shared_ptr 어떤 하나의 객체를 참조하는 스마트 포인터의 개수를 참조하는 스마트 포인터이다.
	    참조 카운트(reference count), 해당 메모리를 참조하는 포인터가 몇개인지 나타내는 값
unique_ptr 하나의 스마트 포인터만이 객체를 가리킬수 있도록 한다. 
		reference count가 1을 넘길수 없다.
weak_ptr 하나 이상의 객체를 참조할수 있지만 reference count를 늘리지않음
		서로가 서로를 가리켜 reference count가 0이 안되는 순환 참조 제거용
==========================================================
<RAII>
자원 획득(Resource Acquisition)은 초기화(Initialization)이다
프로그램을 짜다보면 동적 메모리 할당, 파일 열기, 락 등 자원 획득을 하는 일이 많은데
이러한 자원 획득을 담당하는 클래스를 만들어 그 클래스의 생성자에서만 자원 획득을 하라

자원을 사용하고자 하는 상황에서, 생성자에서 자원 획득을
소멸자에서 자원 해제를 하는 자원 관리용 클래스를 만드는 프로그래밍 디자인 패턴

이렇게 되면 자원의 생애 주기는 객체의 생애와 결합된다
객체의 생애는 런타임이 알아서 잘 관리해준다고 하였다
즉 그렇기에 앞으로는 객체와 바인딩된 자원은 런타임이 자동으로 관리할 수 있다.
==========================================================
<포물선 운동>
x = v0*cosθ*t
y  = v0*sinθ*t-½g*(t^2)

v = 운동을 시작한 힘(초기속도)
g = 중력가속도 (9.8m/s2)
t = 물체가 포물선 운동을 시작한 이후 현재까지의 시간의 누적합

<가속도 법칙>
F = m(질량)a(가속도) 
a = (v - v0) / (t - t0) : v속도 t시간 : 등가속도면 그냥 t
==========================================================
<빅오표기법>
복잡도에 가장 영향을 많이 끼치는 항의 상수인자를 빼고 나머지 항을 없애서 복잡도 나타내는 표기법